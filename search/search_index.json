{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6","title":"Home"},{"location":"#home","text":"","title":"Home"},{"location":"Topic1/Topic1.1/Topic1.1.1/","text":"Topic 1.1.1 \u00b6 .NET WebAPI Boilerplate .NET WebAPI Boilerplate Template built with .NET 6.0. Incorporates the most essential Packages your projects will ever need. Follows Clean Architecture Principles. About \u00b6 dotnet-webapi-boilerplate is an integral part of the fullstackhero project. fullstackhero is a venture to develop industry-leading boilerplate templates for the dotnet stack as the backend (web API) along with modern client frameworks like Angular, MVC, and Blazor. This repository contains the WebApi Project of fullstackhero . Release Planning \u00b6 0.0.3 RC is available now! \u00b6 Migration Refresh Security Patches Image Upload Fix Option to Disable Swagger Cleaner Code Activate / Deactivate Tenants Upgrade Tenant Subscription Advanced Search This is the first pre-release version of the fullstackhero .NET WebAPI Boilerplate package. Newer versions will be available on a weekly basis with newer updates and patches. Read the getting-started guide for more. The Release Version is expected to be out by November 2021 as soon as .NET 6 LTS is launched by Microsoft. Preview versions of this project are available for Initial Developer Testing. Quick Start Guide \u00b6 Open up your Command Prompt / Powershell and run the following command to install the solution template. dotnet new - -install FullStackHero . WebAPI . Boilerplate This would install the fullstackhero .NET WebAPI Boilerplate template globally on your machine. With that done, let's see how you can start generating complete .NET WebAPI Solutions seamlessly. Simply navigate to a new directory (wherever you want to place your new solution), and open up Command Prompt at the opened directory. Run the following command. Note that, in this demonstration, I am naming my new solution as FSH.Starter . dotnet new fsh-api -o FSH . Starter For further steps and details, Read the Getting Started Guide Important Links & Documentations \u00b6 Overview - Read Getting Started - Read Development Environment - Learn about setting up the DEV environment Track Progress - Release 1.0 Milestones Participate in Discussions - QNA & General Discussions Join our Discord - fullstackhero @ Discord Features \u00b6 Built on .NET 6.0 Follows Clean Architecture Principles Completely Documented at fullstackhero.net Multi Tenancy Support Create Tenants with Multi Database / Shared Database Support Activate / Deactivate Tenants on Demand Upgrade Subscription of Tenants - Add More Validity Months to each tenant! Supports MySQL, MSSQL & PostgreSQL! Uses Entity Framework Core as DB Abstraction Flexible Repository Pattern Dapper Integration for Optimal Performance Serilog Integration Swagger Support Mapster Integration for Quicker Mapping API Versioning Response Caching - Distributed Caching Fluent Validations Audit Logging Advanced User & Role Based Permission Management Code Analysis & StyleCop Integration with Rulesets JSON Based Localization with Caching Hangfire Support File Storage Service Test Projects & Much More Community \u00b6 Discord @fullstackhero License \u00b6 This project is licensed with the MIT license . Support \u00b6 Has this Project helped you learn something New? or Helped you at work? Here are a few ways by which you can support. Leave a star! Recommend this awesome project to your colleagues. \ud83e\udd47 Do consider endorsing me on LinkedIn for ASP.NET Core - Connect via LinkedIn \ud83e\uddb8 Or, If you want to support this project in the long run, consider buying me a coffee ! \u2615","title":"Topic 1.1.1"},{"location":"Topic1/Topic1.1/Topic1.1.1/#topic-111","text":"","title":"Topic 1.1.1"},{"location":"Topic1/Topic1.1/Topic1.1.1/#about","text":"dotnet-webapi-boilerplate is an integral part of the fullstackhero project. fullstackhero is a venture to develop industry-leading boilerplate templates for the dotnet stack as the backend (web API) along with modern client frameworks like Angular, MVC, and Blazor. This repository contains the WebApi Project of fullstackhero .","title":"About"},{"location":"Topic1/Topic1.1/Topic1.1.1/#release-planning","text":"","title":"Release Planning"},{"location":"Topic1/Topic1.1/Topic1.1.1/#003-rc-is-available-now","text":"Migration Refresh Security Patches Image Upload Fix Option to Disable Swagger Cleaner Code Activate / Deactivate Tenants Upgrade Tenant Subscription Advanced Search This is the first pre-release version of the fullstackhero .NET WebAPI Boilerplate package. Newer versions will be available on a weekly basis with newer updates and patches. Read the getting-started guide for more. The Release Version is expected to be out by November 2021 as soon as .NET 6 LTS is launched by Microsoft. Preview versions of this project are available for Initial Developer Testing.","title":"0.0.3 RC is available now!"},{"location":"Topic1/Topic1.1/Topic1.1.1/#quick-start-guide","text":"Open up your Command Prompt / Powershell and run the following command to install the solution template. dotnet new - -install FullStackHero . WebAPI . Boilerplate This would install the fullstackhero .NET WebAPI Boilerplate template globally on your machine. With that done, let's see how you can start generating complete .NET WebAPI Solutions seamlessly. Simply navigate to a new directory (wherever you want to place your new solution), and open up Command Prompt at the opened directory. Run the following command. Note that, in this demonstration, I am naming my new solution as FSH.Starter . dotnet new fsh-api -o FSH . Starter For further steps and details, Read the Getting Started Guide","title":"Quick Start Guide"},{"location":"Topic1/Topic1.1/Topic1.1.1/#important-links-documentations","text":"Overview - Read Getting Started - Read Development Environment - Learn about setting up the DEV environment Track Progress - Release 1.0 Milestones Participate in Discussions - QNA & General Discussions Join our Discord - fullstackhero @ Discord","title":"Important Links &amp; Documentations"},{"location":"Topic1/Topic1.1/Topic1.1.1/#features","text":"Built on .NET 6.0 Follows Clean Architecture Principles Completely Documented at fullstackhero.net Multi Tenancy Support Create Tenants with Multi Database / Shared Database Support Activate / Deactivate Tenants on Demand Upgrade Subscription of Tenants - Add More Validity Months to each tenant! Supports MySQL, MSSQL & PostgreSQL! Uses Entity Framework Core as DB Abstraction Flexible Repository Pattern Dapper Integration for Optimal Performance Serilog Integration Swagger Support Mapster Integration for Quicker Mapping API Versioning Response Caching - Distributed Caching Fluent Validations Audit Logging Advanced User & Role Based Permission Management Code Analysis & StyleCop Integration with Rulesets JSON Based Localization with Caching Hangfire Support File Storage Service Test Projects & Much More","title":"Features"},{"location":"Topic1/Topic1.1/Topic1.1.1/#community","text":"Discord @fullstackhero","title":"Community"},{"location":"Topic1/Topic1.1/Topic1.1.1/#license","text":"This project is licensed with the MIT license .","title":"License"},{"location":"Topic1/Topic1.1/Topic1.1.1/#support","text":"Has this Project helped you learn something New? or Helped you at work? Here are a few ways by which you can support. Leave a star! Recommend this awesome project to your colleagues. \ud83e\udd47 Do consider endorsing me on LinkedIn for ASP.NET Core - Connect via LinkedIn \ud83e\uddb8 Or, If you want to support this project in the long run, consider buying me a coffee ! \u2615","title":"Support"},{"location":"Topic1/Topic1.1/Topic1.1.2/","text":"Topic 1.1.2 \u00b6 This repository is a starting point to learn about and engage in .NET and .NET open source projects. This repository is not an official .NET Framework support location, however, we will respond to issues filed here as best we can. Please file .NET Core product issues at dotnet/core and ASP.NET Core product issues at aspnet/home . You can try out an early access release of the .NET Framework at the .NET Framework Early Access website. In this repository \u00b6 .NET Framework Release Notes .NET Framework Documentation .NET Open Source Developer Projects .NET Open Source Consumer Projects Free Services & Tools for Open Source .NET Projects Please contribute to this repository via pull requests Finding .NET Open Source Projects \u00b6 Here are some excellent community-maintained lists of projects: Awesome .NET! ASP.NET Core Library and Framework Support There are many projects that you can use and contribute to, some of which are listed below. Please do contribute to these projects! .NET Core \u00b6 .NET Core (dotnet/core) .NET Core docs (dotnet/docs) ASP.NET Core (dotnet/aspnetcore) ASP.NET Core docs (dotnet/AspNetCore.Docs) Roslyn Compiler Platform (dotnet/roslyn) EntityFramework (dotnet/efcore) WPF (dotnet/wpf) Windows Forms (dotnet/winforms) .NET Framework \u00b6 .NET Framework docs (dotnet/docs) .NET Framework source code - read-only subset (microsoft/referencesource) Xamarin \u00b6 Xamarin iOS + macOS (xamarin-macios) Xamarin Android (xamarin/xamarin-android) Xamarin Forms (xamarin/Xamarin.Forms) Mono Project Community \u00b6 Here is a short list of projects to check out: .NET for Apache Spark Orleans Exceptionless Glimpse JSON.NET MonoGame MVVM Cross ReactiveUI There are additional templates available for dotnet new . For more information, see Available templates for dotnet new .NET Foundation \u00b6 Many .NET open source projects are part of the .NET Foundation . Microsoft has contributed many projects, including ASP.NET Core and .NET Core. You may want to consider joining the .NET Foundation . Check out the .NET Foundation Forums to see what others are talking about, or start a new discussion to ask a question or make a point. License \u00b6 This repository is licensed with the MIT license.","title":"Topic 1.1.2"},{"location":"Topic1/Topic1.1/Topic1.1.2/#topic-112","text":"This repository is a starting point to learn about and engage in .NET and .NET open source projects. This repository is not an official .NET Framework support location, however, we will respond to issues filed here as best we can. Please file .NET Core product issues at dotnet/core and ASP.NET Core product issues at aspnet/home . You can try out an early access release of the .NET Framework at the .NET Framework Early Access website.","title":"Topic 1.1.2"},{"location":"Topic1/Topic1.1/Topic1.1.2/#in-this-repository","text":".NET Framework Release Notes .NET Framework Documentation .NET Open Source Developer Projects .NET Open Source Consumer Projects Free Services & Tools for Open Source .NET Projects Please contribute to this repository via pull requests","title":"In this repository"},{"location":"Topic1/Topic1.1/Topic1.1.2/#finding-net-open-source-projects","text":"Here are some excellent community-maintained lists of projects: Awesome .NET! ASP.NET Core Library and Framework Support There are many projects that you can use and contribute to, some of which are listed below. Please do contribute to these projects!","title":"Finding .NET Open Source Projects"},{"location":"Topic1/Topic1.1/Topic1.1.2/#net-core","text":".NET Core (dotnet/core) .NET Core docs (dotnet/docs) ASP.NET Core (dotnet/aspnetcore) ASP.NET Core docs (dotnet/AspNetCore.Docs) Roslyn Compiler Platform (dotnet/roslyn) EntityFramework (dotnet/efcore) WPF (dotnet/wpf) Windows Forms (dotnet/winforms)","title":".NET Core"},{"location":"Topic1/Topic1.1/Topic1.1.2/#net-framework","text":".NET Framework docs (dotnet/docs) .NET Framework source code - read-only subset (microsoft/referencesource)","title":".NET Framework"},{"location":"Topic1/Topic1.1/Topic1.1.2/#xamarin","text":"Xamarin iOS + macOS (xamarin-macios) Xamarin Android (xamarin/xamarin-android) Xamarin Forms (xamarin/Xamarin.Forms) Mono Project","title":"Xamarin"},{"location":"Topic1/Topic1.1/Topic1.1.2/#community","text":"Here is a short list of projects to check out: .NET for Apache Spark Orleans Exceptionless Glimpse JSON.NET MonoGame MVVM Cross ReactiveUI There are additional templates available for dotnet new . For more information, see Available templates for dotnet new","title":"Community"},{"location":"Topic1/Topic1.1/Topic1.1.2/#net-foundation","text":"Many .NET open source projects are part of the .NET Foundation . Microsoft has contributed many projects, including ASP.NET Core and .NET Core. You may want to consider joining the .NET Foundation . Check out the .NET Foundation Forums to see what others are talking about, or start a new discussion to ask a question or make a point.","title":".NET Foundation"},{"location":"Topic1/Topic1.1/Topic1.1.2/#license","text":"This repository is licensed with the MIT license.","title":"License"},{"location":"Topic1/Topic1.1/Topic1.1.3/","text":"Topic 1.1.3 Repository \u00b6 This repository is home to the following .NET Foundation projects. These projects are maintained by Microsoft and licensed under the MIT License . Entity Framework Core Microsoft.Data.Sqlite Entity Framework Core \u00b6 EF Core is a modern object-database mapper for .NET. It supports LINQ queries, change tracking, updates, and schema migrations. EF Core works with SQL Server, Azure SQL Database, SQLite, Azure Cosmos DB, MySQL, PostgreSQL, and other databases through a provider plugin API. Installation \u00b6 EF Core is available on NuGet . Install the provider package corresponding to your target database. See the list of providers in the docs for additional databases. dotnet add package Microsoft.EntityFrameworkCore.SqlServer dotnet add package Microsoft.EntityFrameworkCore.Sqlite dotnet add package Microsoft.EntityFrameworkCore.Cosmos Use the --version option to specify a preview version to install. Daily builds \u00b6 We recommend using the daily builds to get the latest code and provide feedback on EF Core. These builds contain latest features and bug fixes; previews and official releases lag significantly behind. Basic usage \u00b6 The following code demonstrates basic usage of EF Core. For a full tutorial configuring the DbContext , defining the model, and creating the database, see getting started in the docs. using (var db = new BloggingContext()) { // Inserting data into the database db.Add(new Blog { Url = \"http://blogs.msdn.com/adonet\" }); db.SaveChanges(); // Querying var blog = db.Blogs .OrderBy(b => b.BlogId) .First(); // Updating blog.Url = \"https://devblogs.microsoft.com/dotnet\"; blog.Posts.Add( new Post { Title = \"Hello World\", Content = \"I wrote an app using EF Core!\" }); db.SaveChanges(); // Deleting db.Remove(blog); db.SaveChanges(); } Build from source \u00b6 Most people use EF Core by installing pre-build NuGet packages, as shown above. Alternately, the code can be built and packages can be created directly on your development machine . Contributing \u00b6 We welcome community pull requests for bug fixes, enhancements, and documentation. See How to contribute for more information. Getting support \u00b6 If you have a specific question about using these projects, we encourage you to ask it on Stack Overflow . If you encounter a bug or would like to request a feature, submit an issue . For more details, see getting support . Microsoft.Data.Sqlite \u00b6 Microsoft.Data.Sqlite is a lightweight ADO.NET provider for SQLite. The EF Core provider for SQLite is built on top of this library. However, it can also be used independently or with other data access libraries. Installation \u00b6 The latest stable version is available on NuGet . dotnet add package Microsoft.Data.Sqlite Use the --version option to specify a preview version to install. Daily builds \u00b6 We recommend using the daily builds to get the latest code and provide feedback on Microsoft.Data.Sqlite. These builds contain latest features and bug fixes; previews and official releases lag significantly behind. Basic usage \u00b6 This library implements the common ADO.NET abstractions for connections, commands, data readers, and so on. For more information, see Microsoft.Data.Sqlite on Microsoft Docs. using (var connection = new SqliteConnection(\"Data Source=Blogs.db\")) { connection.Open(); var command = connection.CreateCommand(); command.CommandText = \"SELECT Url FROM Blogs\"; using (var reader = command.ExecuteReader()) { while (reader.Read()) { var url = reader.GetString(0); } } } Build from source \u00b6 Most people use Microsoft.Data.Sqlite by installing pre-build NuGet packages, as shown above. Alternately, the code can be built and packages can be created directly on your development machine . Contributing \u00b6 We welcome community pull requests for bug fixes, enhancements, and documentation. See How to contribute for more information. Getting support \u00b6 If you have a specific question about using these projects, we encourage you to ask it on Stack Overflow . If you encounter a bug or would like to request a feature, submit an issue . For more details, see getting support . See also \u00b6 Documentation Roadmap Weekly status updates Release planning process How to write an EF Core provider Security Code of conduct","title":"Topic 1.1.3"},{"location":"Topic1/Topic1.1/Topic1.1.3/#topic-113-repository","text":"This repository is home to the following .NET Foundation projects. These projects are maintained by Microsoft and licensed under the MIT License . Entity Framework Core Microsoft.Data.Sqlite","title":"Topic 1.1.3 Repository"},{"location":"Topic1/Topic1.1/Topic1.1.3/#entity-framework-core","text":"EF Core is a modern object-database mapper for .NET. It supports LINQ queries, change tracking, updates, and schema migrations. EF Core works with SQL Server, Azure SQL Database, SQLite, Azure Cosmos DB, MySQL, PostgreSQL, and other databases through a provider plugin API.","title":"Entity Framework Core"},{"location":"Topic1/Topic1.1/Topic1.1.3/#installation","text":"EF Core is available on NuGet . Install the provider package corresponding to your target database. See the list of providers in the docs for additional databases. dotnet add package Microsoft.EntityFrameworkCore.SqlServer dotnet add package Microsoft.EntityFrameworkCore.Sqlite dotnet add package Microsoft.EntityFrameworkCore.Cosmos Use the --version option to specify a preview version to install.","title":"Installation"},{"location":"Topic1/Topic1.1/Topic1.1.3/#daily-builds","text":"We recommend using the daily builds to get the latest code and provide feedback on EF Core. These builds contain latest features and bug fixes; previews and official releases lag significantly behind.","title":"Daily builds"},{"location":"Topic1/Topic1.1/Topic1.1.3/#basic-usage","text":"The following code demonstrates basic usage of EF Core. For a full tutorial configuring the DbContext , defining the model, and creating the database, see getting started in the docs. using (var db = new BloggingContext()) { // Inserting data into the database db.Add(new Blog { Url = \"http://blogs.msdn.com/adonet\" }); db.SaveChanges(); // Querying var blog = db.Blogs .OrderBy(b => b.BlogId) .First(); // Updating blog.Url = \"https://devblogs.microsoft.com/dotnet\"; blog.Posts.Add( new Post { Title = \"Hello World\", Content = \"I wrote an app using EF Core!\" }); db.SaveChanges(); // Deleting db.Remove(blog); db.SaveChanges(); }","title":"Basic usage"},{"location":"Topic1/Topic1.1/Topic1.1.3/#build-from-source","text":"Most people use EF Core by installing pre-build NuGet packages, as shown above. Alternately, the code can be built and packages can be created directly on your development machine .","title":"Build from source"},{"location":"Topic1/Topic1.1/Topic1.1.3/#contributing","text":"We welcome community pull requests for bug fixes, enhancements, and documentation. See How to contribute for more information.","title":"Contributing"},{"location":"Topic1/Topic1.1/Topic1.1.3/#getting-support","text":"If you have a specific question about using these projects, we encourage you to ask it on Stack Overflow . If you encounter a bug or would like to request a feature, submit an issue . For more details, see getting support .","title":"Getting support"},{"location":"Topic1/Topic1.1/Topic1.1.3/#microsoftdatasqlite","text":"Microsoft.Data.Sqlite is a lightweight ADO.NET provider for SQLite. The EF Core provider for SQLite is built on top of this library. However, it can also be used independently or with other data access libraries.","title":"Microsoft.Data.Sqlite"},{"location":"Topic1/Topic1.1/Topic1.1.3/#installation_1","text":"The latest stable version is available on NuGet . dotnet add package Microsoft.Data.Sqlite Use the --version option to specify a preview version to install.","title":"Installation"},{"location":"Topic1/Topic1.1/Topic1.1.3/#daily-builds_1","text":"We recommend using the daily builds to get the latest code and provide feedback on Microsoft.Data.Sqlite. These builds contain latest features and bug fixes; previews and official releases lag significantly behind.","title":"Daily builds"},{"location":"Topic1/Topic1.1/Topic1.1.3/#basic-usage_1","text":"This library implements the common ADO.NET abstractions for connections, commands, data readers, and so on. For more information, see Microsoft.Data.Sqlite on Microsoft Docs. using (var connection = new SqliteConnection(\"Data Source=Blogs.db\")) { connection.Open(); var command = connection.CreateCommand(); command.CommandText = \"SELECT Url FROM Blogs\"; using (var reader = command.ExecuteReader()) { while (reader.Read()) { var url = reader.GetString(0); } } }","title":"Basic usage"},{"location":"Topic1/Topic1.1/Topic1.1.3/#build-from-source_1","text":"Most people use Microsoft.Data.Sqlite by installing pre-build NuGet packages, as shown above. Alternately, the code can be built and packages can be created directly on your development machine .","title":"Build from source"},{"location":"Topic1/Topic1.1/Topic1.1.3/#contributing_1","text":"We welcome community pull requests for bug fixes, enhancements, and documentation. See How to contribute for more information.","title":"Contributing"},{"location":"Topic1/Topic1.1/Topic1.1.3/#getting-support_1","text":"If you have a specific question about using these projects, we encourage you to ask it on Stack Overflow . If you encounter a bug or would like to request a feature, submit an issue . For more details, see getting support .","title":"Getting support"},{"location":"Topic1/Topic1.1/Topic1.1.3/#see-also","text":"Documentation Roadmap Weekly status updates Release planning process How to write an EF Core provider Security Code of conduct","title":"See also"},{"location":"Topic1/Topic1.2/Topic1.2.1/","text":"Topic 1.2.1 \u00b6","title":"Topic 1.2.1"},{"location":"Topic1/Topic1.2/Topic1.2.1/#topic-121","text":"","title":"Topic 1.2.1"},{"location":"Topic1/Topic1.2/Topic1.2.2/","text":"Topic 1.2.2 \u00b6","title":"Topic 1.2.2"},{"location":"Topic1/Topic1.2/Topic1.2.2/#topic-122","text":"","title":"Topic 1.2.2"},{"location":"Topic1/Topic1.2/Topic1.2.3/","text":"Topic 1.2.3 \u00b6","title":"Topic 1.2.3"},{"location":"Topic1/Topic1.2/Topic1.2.3/#topic-123","text":"","title":"Topic 1.2.3"},{"location":"Topic1/Topic1.3/Topic1.3.1/","text":"Topic 1.3.1 \u00b6","title":"Topic 1.3.1"},{"location":"Topic1/Topic1.3/Topic1.3.1/#topic-131","text":"","title":"Topic 1.3.1"},{"location":"Topic1/Topic1.3/Topic1.3.2/","text":"Topic 1.3.2 \u00b6","title":"Topic 1.3.2"},{"location":"Topic1/Topic1.3/Topic1.3.2/#topic-132","text":"","title":"Topic 1.3.2"},{"location":"Topic1/Topic1.3/Topic1.3.3/","text":"Topic 1.3.3 \u00b6","title":"Topic 1.3.3"},{"location":"Topic1/Topic1.3/Topic1.3.3/#topic-133","text":"","title":"Topic 1.3.3"},{"location":"Topic2/Topic2.1/Topic2.1.1/","text":"Topic 2.1.1 Visual Studio Code - Open Source (\"Code - OSS\") \u00b6 The Repository \u00b6 This repository (\" Code - OSS \") is where we (Microsoft) develop the Visual Studio Code product together with the community. Not only do we work on code and issues here, we also publish our roadmap , monthly iteration plans , and our endgame plans . This source code is available to everyone under the standard MIT license . Visual Studio Code \u00b6 Visual Studio Code is a distribution of the Code - OSS repository with Microsoft specific customizations released under a traditional Microsoft product license . Visual Studio Code combines the simplicity of a code editor with what developers need for their core edit-build-debug cycle. It provides comprehensive code editing, navigation, and understanding support along with lightweight debugging, a rich extensibility model, and lightweight integration with existing tools. Visual Studio Code is updated monthly with new features and bug fixes. You can download it for Windows, macOS, and Linux on Visual Studio Code's website . To get the latest releases every day, install the Insiders build . Contributing \u00b6 There are many ways in which you can participate in this project, for example: Submit bugs and feature requests , and help us verify as they are checked in Review source code changes Review the documentation and make pull requests for anything from typos to additional and new content If you are interested in fixing issues and contributing directly to the code base, please see the document How to Contribute , which covers the following: How to build and run from source The development workflow, including debugging and running tests Coding guidelines Submitting pull requests Finding an issue to work on Contributing to translations Feedback \u00b6 Ask a question on Stack Overflow Request a new feature Upvote popular feature requests File an issue Follow @code and let us know what you think! See our wiki for a description of each of these channels and information on some other available community-driven channels. Related Projects \u00b6 Many of the core components and extensions to VS Code live in their own repositories on GitHub. For example, the node debug adapter and the mono debug adapter have their own repositories. For a complete list, please visit the Related Projects page on our wiki . Bundled Extensions \u00b6 VS Code includes a set of built-in extensions located in the extensions folder, including grammars and snippets for many languages. Extensions that provide rich language support (code completion, Go to Definition) for a language have the suffix language-features . For example, the json extension provides coloring for JSON and the json-language-features provides rich language support for JSON . Development Container \u00b6 This repository includes a Visual Studio Code Remote - Containers / GitHub Codespaces development container. For Remote - Containers , use the Remote-Containers: Clone Repository in Container Volume... command which creates a Docker volume for better disk I/O on macOS and Windows. For Codespaces, install the Github Codespaces extension in VS Code, and use the Codespaces: Create New Codespace command. Docker / the Codespace should have at least 4 Cores and 6 GB of RAM (8 GB recommended) to run full build. See the development container README for more information. Code of Conduct \u00b6 This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments. License \u00b6 Copyright \u00a9 Microsoft Corporation. All rights reserved. Licensed under the MIT license.","title":"Topic 2.1.1"},{"location":"Topic2/Topic2.1/Topic2.1.1/#topic-211-visual-studio-code-open-source-code-oss","text":"","title":"Topic 2.1.1 Visual Studio Code - Open Source (\"Code - OSS\")"},{"location":"Topic2/Topic2.1/Topic2.1.1/#the-repository","text":"This repository (\" Code - OSS \") is where we (Microsoft) develop the Visual Studio Code product together with the community. Not only do we work on code and issues here, we also publish our roadmap , monthly iteration plans , and our endgame plans . This source code is available to everyone under the standard MIT license .","title":"The Repository"},{"location":"Topic2/Topic2.1/Topic2.1.1/#visual-studio-code","text":"Visual Studio Code is a distribution of the Code - OSS repository with Microsoft specific customizations released under a traditional Microsoft product license . Visual Studio Code combines the simplicity of a code editor with what developers need for their core edit-build-debug cycle. It provides comprehensive code editing, navigation, and understanding support along with lightweight debugging, a rich extensibility model, and lightweight integration with existing tools. Visual Studio Code is updated monthly with new features and bug fixes. You can download it for Windows, macOS, and Linux on Visual Studio Code's website . To get the latest releases every day, install the Insiders build .","title":"Visual Studio Code"},{"location":"Topic2/Topic2.1/Topic2.1.1/#contributing","text":"There are many ways in which you can participate in this project, for example: Submit bugs and feature requests , and help us verify as they are checked in Review source code changes Review the documentation and make pull requests for anything from typos to additional and new content If you are interested in fixing issues and contributing directly to the code base, please see the document How to Contribute , which covers the following: How to build and run from source The development workflow, including debugging and running tests Coding guidelines Submitting pull requests Finding an issue to work on Contributing to translations","title":"Contributing"},{"location":"Topic2/Topic2.1/Topic2.1.1/#feedback","text":"Ask a question on Stack Overflow Request a new feature Upvote popular feature requests File an issue Follow @code and let us know what you think! See our wiki for a description of each of these channels and information on some other available community-driven channels.","title":"Feedback"},{"location":"Topic2/Topic2.1/Topic2.1.1/#related-projects","text":"Many of the core components and extensions to VS Code live in their own repositories on GitHub. For example, the node debug adapter and the mono debug adapter have their own repositories. For a complete list, please visit the Related Projects page on our wiki .","title":"Related Projects"},{"location":"Topic2/Topic2.1/Topic2.1.1/#bundled-extensions","text":"VS Code includes a set of built-in extensions located in the extensions folder, including grammars and snippets for many languages. Extensions that provide rich language support (code completion, Go to Definition) for a language have the suffix language-features . For example, the json extension provides coloring for JSON and the json-language-features provides rich language support for JSON .","title":"Bundled Extensions"},{"location":"Topic2/Topic2.1/Topic2.1.1/#development-container","text":"This repository includes a Visual Studio Code Remote - Containers / GitHub Codespaces development container. For Remote - Containers , use the Remote-Containers: Clone Repository in Container Volume... command which creates a Docker volume for better disk I/O on macOS and Windows. For Codespaces, install the Github Codespaces extension in VS Code, and use the Codespaces: Create New Codespace command. Docker / the Codespace should have at least 4 Cores and 6 GB of RAM (8 GB recommended) to run full build. See the development container README for more information.","title":"Development Container"},{"location":"Topic2/Topic2.1/Topic2.1.1/#code-of-conduct","text":"This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"Topic2/Topic2.1/Topic2.1.1/#license","text":"Copyright \u00a9 Microsoft Corporation. All rights reserved. Licensed under the MIT license.","title":"License"},{"location":"Topic2/Topic2.1/Topic2.1.2/","text":"Topic 2.1.2 \u00b6 Orleans is a cross-platform framework for building robust, scalable distributed applications \u00b6 Orleans builds on the developer productivity of .NET and brings it to the world of distributed applications, such as cloud services. Orleans scales from a single on-premises server to globally distributed, highly-available applications in the cloud. Orleans takes familiar concepts like objects, interfaces, async/await, and try/catch and extends them to multi-server environments. As such, it helps developers experienced with single-server applications transition to building resilient, scalable cloud services and other distributed applications. For this reason, Orleans has often been referred to as \"Distributed .NET\". It was created by Microsoft Research and introduced the Virtual Actor Model as a novel approach to building a new generation of distributed systems for the Cloud era. The core contribution of Orleans is its programming model which tames the complexity inherent to highly-parallel distributed systems without restricting capabilities or imposing onerous constraints on the developer. Grains \u00b6 The fundamental building block in any Orleans application is a grain . Grains are entities comprising user-defined identity, behavior, and state. Grain identities are user-defined keys which make Grains always available for invocation. Grains can be invoked by other grains or by external clients such as Web frontends, via strongly-typed communication interfaces (contracts). Each grain is an instance of a class which implements one or more of these interfaces. Grains can have volatile and/or persistent state that can be stored in any storage system. As such, grains implicitly partition application state, enabling automatic scalability and simplifying recovery from failures. Grain state is kept in memory while the grain is active, leading to lower latency and less load on data stores. Instantiation of grains is automatically performed on demand by the Orleans runtime. Grains which are not used for a while are automatically removed from memory to free up resources. This is possible because of their stable identity, which allows invoking grains whether they are already loaded into memory or not. This also allows for transparent recovery from failure because the caller does not need to know on which server a grain is instantiated on at any point in time. Grains have a managed lifecycle, with the Orleans runtime responsible for activating/deactivating, and placing/locating grains as needed. This allows the developer to write code as if all grains were always in-memory. Taken together, the stable identity, statefulness, and managed lifecycle of Grains are core factors that make systems built on Orleans scalable, performant, & reliable without forcing developers to write complex distributed systems code. Example: Internet of Things Cloud Backend \u00b6 Consider a cloud backend for an Internet of Things system. This application needs to process incoming device data, filter, aggregate, and process this information, and enable sending commands to devices. In Orleans, it is natural to model each device with a grain which becomes a digital twin of the physical device it corresponds to. These grains keep the latest device data in memory, so that they can be quickly queried and processed without the need to communicate with the physical device directly. By observing streams of time-series data from the device, the grain can detect changes in conditions, such as measurements exceeding a threshold, and trigger an action. A simple thermostat could be modeled as follows: public interface IThermostat : IGrainWithStringKey { Task < List < Command >> OnUpdate ( ThermostatStatus update ); } Events arriving from the thermostat from a Web frontend can be sent to its grain by invoking the OnUpdate method which optionally returns a command back to the device. var thermostat = client . GetGrain < IThermostat >( id ); return await thermostat . OnUpdate ( update ); The same thermostat grain can implement a separate interface for control systems to interact with: public interface IThermostatControl : IGrainWithStringKey { Task < ThermostatStatus > GetStatus (); Task UpdateConfiguration ( ThermostatConfiguration config ); } These two interfaces ( IThermostat and IThermostatControl ) are implemented by a single implementation class: public class ThermostatGrain : Grain , IThermostat , IThermostatControl { private ThermostatStatus _status ; private List < Command > _commands ; public Task < List < Command >> OnUpdate ( ThermostatStatus status ) { _status = status ; var result = _commands ; _commands = new List < Command >(); return Task . FromResult ( result ); } public Task < ThermostatStatus > GetStatus () => Task . FromResult ( _status ); public Task UpdateConfiguration ( ThermostatConfiguration config ) { _commands . Add ( new ConfigUpdateCommand ( config )); return Task . CompletedTask ; } } The grain class above does not persist its state. A more thorough example demonstrating state persistence is available in the documentation . Orleans Runtime \u00b6 The Orleans runtime is what implements the programming model for applications. The main component of the runtime is the silo , which is responsible for hosting grains. Typically, a group of silos run as a cluster for scalability and fault-tolerance. When run as a cluster, silos coordinate with each other to distribute work, detect and recover from failures. The runtime enables grains hosted in the cluster to communicate with each other as if they are within a single process. In addition to the core programming model, the silo provides grains with a set of runtime services, such as timers, reminders (persistent timers), persistence, transactions, streams, and more. See the features section below for more detail. Web frontends and other external clients call grains in the cluster using the client library which automatically manages network communication. Clients can also be co-hosted in the same process with silos for simplicity. Orleans is compatible with .NET Standard 2.0 and above, running on Windows, Linux, and macOS, in full .NET Framework or .NET Core. Features \u00b6 Persistence \u00b6 Orleans provides a simple persistence model which ensures that state is available to a grain before requests are processed and that consistency is maintained. Grains can have multiple named persistent data objects, for example, one called \"profile\" for a user's profile and one called \"inventory\" for their inventory. This state can be stored in any storage system. For example, profile data may be stored in one database and inventory in another. While a grain is running, this state is kept in memory so that read requests can be served without accessing storage. When the grain updates its state, a state.WriteStateAsync() call ensures that the backing store is updated for durability and consistency. For more information, see the Grain Persistence documentation. Distributed ACID Transactions \u00b6 In addition to the simple persistence model described above, grains can have transactional state . Multiple grains can participate in ACID transactions together regardless of where their state is ultimately stored. Transactions in Orleans are distributed and decentralized (there is no central transaction manager or transaction coordinator) and have serializable isolation . For more information on transactions in Orleans, see the documentation and the Microsoft Research technical report . Streams \u00b6 Streams help developers to process series of data items in near-real time. Streams in Orleans are managed : streams do not need to be created or registered before a grain or client publishes to a stream or subscribes to a stream. This allows for greater decoupling of stream producers and consumers from each other and from the infrastructure. Stream processing is reliable: grains can store checkpoints (cursors) and reset to a stored checkpoint during activation or at any point afterwards. Streams supports batch delivery of messages to consumers to improve efficiency and recovery performance. Streams are backed by queueing services such as Azure Event Hubs, Amazon Kinesis, and others. An arbitrary number of streams can be multiplexed onto a smaller number of queues and the responsibility for processing these queues is balanced evenly across the cluster. Timers & Reminders \u00b6 Reminders are a durable scheduling mechanism for grains. They can be used to ensure that some action is completed at a future point even if the grain is not currently activated at that time. Timers are the non-durable counterpart to reminders and can be used for high-frequency events which do not require reliability. For more information, see the Timers and Reminders documentation. Flexible Grain Placement \u00b6 When a grain is activated in Orleans, the runtime decides which server (silo) to activate that grain on. This is called grain placement. The placement process in Orleans is fully configurable: developers can choose from a set of out-of-the-box placement policies such as random, prefer-local, and load-based, or custom logic can be configured. This allows for full flexibility in deciding where grains are created. For example, grains can be placed on a server close to resources which they need to operate on or other grains which they communicate with. Grain Versioning & Heterogeneous Clusters \u00b6 Application code evolves over time and upgrading live, production systems in a manner which safely accounts for these changes can be challenging, particularly in stateful systems. Grain interfaces in Orleans can be optionally versioned. The cluster maintains a mapping of which grain implementations are available on which silos in the cluster and the versions of those implementations. This version information is used by the runtime in conjunction with placement strategies to make placement decisions when routing calls to grains. In addition to safe update of versioned grains, this also enables heterogeneous clusters, where different silos have different sets of grain implementations available. For more information, see the Grain Versioning documentation. Elastic Scalability & Fault Tolerance \u00b6 Orleans is designed to scale elastically. When a silo joins a cluster it is able to accept new activations and when a silo leaves the cluster (either because of scale down or a machine failure) the grains which were activated on that silo will be re-activated on remaining silos as needed. An Orleans cluster can be scaled down to a single silo. The same properties which enable elastic scalability also enable fault tolerance: the cluster automatically detects and quickly recovers from failures. Run Anywhere \u00b6 Orleans runs anywhere that .NET Core or .NET Framework are supported. This includes hosting on Linux, Windows, and macOS and deploying to Kubernetes, virtual or physical machines, on premises or in the cloud, and PaaS services such as Azure Cloud Services. Stateless Workers \u00b6 Stateless workers are specially marked grains which do not have any associated state and can be activated on multiple silos simultaneously. This enables increased parallelism for stateless functions. For more information, see the Stateless Worker Grains documentation. Grain Call Filters \u00b6 Logic which is common to many grains can be expressed as Grain Call Filters . Orleans supports filters for both incoming and outgoing calls. Some common use-cases of filters are: authorization, logging and telemetry, and error handling. Request Context \u00b6 Metadata and other information can be passed along a series of requests using request context . Request context can be used for holding distributed tracing information or any other user-defined values. Documentation \u00b6 Documentation is located here Samples \u00b6 A variety of samples are available in the samples directory. Getting Started \u00b6 Please see the getting started tutorial . Building \u00b6 On Windows, run the build.cmd script to build the NuGet packages locally, then reference the required NuGet packages from /Artifacts/Release/* . You can run Test.cmd to run all BVT tests, and TestAll.cmd to also run Functional tests. On Linux and macOS, run the build.sh script or dotnet build to build Orleans. Official Builds \u00b6 The latest stable, production-quality release is located here . Nightly builds are published to a NuGet feed . These builds pass all functional tests, but are not thoroughly tested as the stable builds or pre-release builds published to NuGet. Using the nightly build packages in your project To use nightly builds in your project, add the MyGet feed using either of the following methods: 1. Changing the .csproj file to include this section: <RestoreSources> $(RestoreSources); https://orleans.pkgs.visualstudio.com/orleans-public/_packaging/orleans-builds/nuget/v3/index.json; </RestoreSources> or 2. Creating a `NuGet.config` file in the solution directory with the following contents: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <clear /> <add key= \"orleans-builds\" value= \"https://orleans.pkgs.visualstudio.com/orleans-public/_packaging/orleans-builds/nuget/v3/index.json\" /> <add key= \"nuget\" value= \"https://api.nuget.org/v3/index.json\" /> </packageSources> </configuration> Community \u00b6 Ask questions by opening an issue on GitHub or on Stack Overflow Chat on Gitter Orleans Blog Follow the @msftorleans Twitter account for Orleans announcements. OrleansContrib - GitHub organization for community add-ons to Orleans Various community projects, including Monitoring, Design Patterns, Storage Providers, etc. Guidelines for developers wanting to contribute code changes to Orleans . You are also encouraged to report bugs or start a technical discussion by starting a new thread on GitHub. License \u00b6 This project is licensed under the MIT license . Quick Links \u00b6 Microsoft Research project home Technical Report: Distributed Virtual Actors for Programmability and Scalability Orleans Documentation Contributing","title":"Topic 2.1.2"},{"location":"Topic2/Topic2.1/Topic2.1.2/#topic-212","text":"","title":"Topic 2.1.2"},{"location":"Topic2/Topic2.1/Topic2.1.2/#orleans-is-a-cross-platform-framework-for-building-robust-scalable-distributed-applications","text":"Orleans builds on the developer productivity of .NET and brings it to the world of distributed applications, such as cloud services. Orleans scales from a single on-premises server to globally distributed, highly-available applications in the cloud. Orleans takes familiar concepts like objects, interfaces, async/await, and try/catch and extends them to multi-server environments. As such, it helps developers experienced with single-server applications transition to building resilient, scalable cloud services and other distributed applications. For this reason, Orleans has often been referred to as \"Distributed .NET\". It was created by Microsoft Research and introduced the Virtual Actor Model as a novel approach to building a new generation of distributed systems for the Cloud era. The core contribution of Orleans is its programming model which tames the complexity inherent to highly-parallel distributed systems without restricting capabilities or imposing onerous constraints on the developer.","title":"Orleans is a cross-platform framework for building robust, scalable distributed applications"},{"location":"Topic2/Topic2.1/Topic2.1.2/#grains","text":"The fundamental building block in any Orleans application is a grain . Grains are entities comprising user-defined identity, behavior, and state. Grain identities are user-defined keys which make Grains always available for invocation. Grains can be invoked by other grains or by external clients such as Web frontends, via strongly-typed communication interfaces (contracts). Each grain is an instance of a class which implements one or more of these interfaces. Grains can have volatile and/or persistent state that can be stored in any storage system. As such, grains implicitly partition application state, enabling automatic scalability and simplifying recovery from failures. Grain state is kept in memory while the grain is active, leading to lower latency and less load on data stores. Instantiation of grains is automatically performed on demand by the Orleans runtime. Grains which are not used for a while are automatically removed from memory to free up resources. This is possible because of their stable identity, which allows invoking grains whether they are already loaded into memory or not. This also allows for transparent recovery from failure because the caller does not need to know on which server a grain is instantiated on at any point in time. Grains have a managed lifecycle, with the Orleans runtime responsible for activating/deactivating, and placing/locating grains as needed. This allows the developer to write code as if all grains were always in-memory. Taken together, the stable identity, statefulness, and managed lifecycle of Grains are core factors that make systems built on Orleans scalable, performant, & reliable without forcing developers to write complex distributed systems code.","title":"Grains"},{"location":"Topic2/Topic2.1/Topic2.1.2/#example-internet-of-things-cloud-backend","text":"Consider a cloud backend for an Internet of Things system. This application needs to process incoming device data, filter, aggregate, and process this information, and enable sending commands to devices. In Orleans, it is natural to model each device with a grain which becomes a digital twin of the physical device it corresponds to. These grains keep the latest device data in memory, so that they can be quickly queried and processed without the need to communicate with the physical device directly. By observing streams of time-series data from the device, the grain can detect changes in conditions, such as measurements exceeding a threshold, and trigger an action. A simple thermostat could be modeled as follows: public interface IThermostat : IGrainWithStringKey { Task < List < Command >> OnUpdate ( ThermostatStatus update ); } Events arriving from the thermostat from a Web frontend can be sent to its grain by invoking the OnUpdate method which optionally returns a command back to the device. var thermostat = client . GetGrain < IThermostat >( id ); return await thermostat . OnUpdate ( update ); The same thermostat grain can implement a separate interface for control systems to interact with: public interface IThermostatControl : IGrainWithStringKey { Task < ThermostatStatus > GetStatus (); Task UpdateConfiguration ( ThermostatConfiguration config ); } These two interfaces ( IThermostat and IThermostatControl ) are implemented by a single implementation class: public class ThermostatGrain : Grain , IThermostat , IThermostatControl { private ThermostatStatus _status ; private List < Command > _commands ; public Task < List < Command >> OnUpdate ( ThermostatStatus status ) { _status = status ; var result = _commands ; _commands = new List < Command >(); return Task . FromResult ( result ); } public Task < ThermostatStatus > GetStatus () => Task . FromResult ( _status ); public Task UpdateConfiguration ( ThermostatConfiguration config ) { _commands . Add ( new ConfigUpdateCommand ( config )); return Task . CompletedTask ; } } The grain class above does not persist its state. A more thorough example demonstrating state persistence is available in the documentation .","title":"Example: Internet of Things Cloud Backend"},{"location":"Topic2/Topic2.1/Topic2.1.2/#orleans-runtime","text":"The Orleans runtime is what implements the programming model for applications. The main component of the runtime is the silo , which is responsible for hosting grains. Typically, a group of silos run as a cluster for scalability and fault-tolerance. When run as a cluster, silos coordinate with each other to distribute work, detect and recover from failures. The runtime enables grains hosted in the cluster to communicate with each other as if they are within a single process. In addition to the core programming model, the silo provides grains with a set of runtime services, such as timers, reminders (persistent timers), persistence, transactions, streams, and more. See the features section below for more detail. Web frontends and other external clients call grains in the cluster using the client library which automatically manages network communication. Clients can also be co-hosted in the same process with silos for simplicity. Orleans is compatible with .NET Standard 2.0 and above, running on Windows, Linux, and macOS, in full .NET Framework or .NET Core.","title":"Orleans Runtime"},{"location":"Topic2/Topic2.1/Topic2.1.2/#features","text":"","title":"Features"},{"location":"Topic2/Topic2.1/Topic2.1.2/#persistence","text":"Orleans provides a simple persistence model which ensures that state is available to a grain before requests are processed and that consistency is maintained. Grains can have multiple named persistent data objects, for example, one called \"profile\" for a user's profile and one called \"inventory\" for their inventory. This state can be stored in any storage system. For example, profile data may be stored in one database and inventory in another. While a grain is running, this state is kept in memory so that read requests can be served without accessing storage. When the grain updates its state, a state.WriteStateAsync() call ensures that the backing store is updated for durability and consistency. For more information, see the Grain Persistence documentation.","title":"Persistence"},{"location":"Topic2/Topic2.1/Topic2.1.2/#distributed-acid-transactions","text":"In addition to the simple persistence model described above, grains can have transactional state . Multiple grains can participate in ACID transactions together regardless of where their state is ultimately stored. Transactions in Orleans are distributed and decentralized (there is no central transaction manager or transaction coordinator) and have serializable isolation . For more information on transactions in Orleans, see the documentation and the Microsoft Research technical report .","title":"Distributed ACID Transactions"},{"location":"Topic2/Topic2.1/Topic2.1.2/#streams","text":"Streams help developers to process series of data items in near-real time. Streams in Orleans are managed : streams do not need to be created or registered before a grain or client publishes to a stream or subscribes to a stream. This allows for greater decoupling of stream producers and consumers from each other and from the infrastructure. Stream processing is reliable: grains can store checkpoints (cursors) and reset to a stored checkpoint during activation or at any point afterwards. Streams supports batch delivery of messages to consumers to improve efficiency and recovery performance. Streams are backed by queueing services such as Azure Event Hubs, Amazon Kinesis, and others. An arbitrary number of streams can be multiplexed onto a smaller number of queues and the responsibility for processing these queues is balanced evenly across the cluster.","title":"Streams"},{"location":"Topic2/Topic2.1/Topic2.1.2/#timers-reminders","text":"Reminders are a durable scheduling mechanism for grains. They can be used to ensure that some action is completed at a future point even if the grain is not currently activated at that time. Timers are the non-durable counterpart to reminders and can be used for high-frequency events which do not require reliability. For more information, see the Timers and Reminders documentation.","title":"Timers &amp; Reminders"},{"location":"Topic2/Topic2.1/Topic2.1.2/#flexible-grain-placement","text":"When a grain is activated in Orleans, the runtime decides which server (silo) to activate that grain on. This is called grain placement. The placement process in Orleans is fully configurable: developers can choose from a set of out-of-the-box placement policies such as random, prefer-local, and load-based, or custom logic can be configured. This allows for full flexibility in deciding where grains are created. For example, grains can be placed on a server close to resources which they need to operate on or other grains which they communicate with.","title":"Flexible Grain Placement"},{"location":"Topic2/Topic2.1/Topic2.1.2/#grain-versioning-heterogeneous-clusters","text":"Application code evolves over time and upgrading live, production systems in a manner which safely accounts for these changes can be challenging, particularly in stateful systems. Grain interfaces in Orleans can be optionally versioned. The cluster maintains a mapping of which grain implementations are available on which silos in the cluster and the versions of those implementations. This version information is used by the runtime in conjunction with placement strategies to make placement decisions when routing calls to grains. In addition to safe update of versioned grains, this also enables heterogeneous clusters, where different silos have different sets of grain implementations available. For more information, see the Grain Versioning documentation.","title":"Grain Versioning &amp; Heterogeneous Clusters"},{"location":"Topic2/Topic2.1/Topic2.1.2/#elastic-scalability-fault-tolerance","text":"Orleans is designed to scale elastically. When a silo joins a cluster it is able to accept new activations and when a silo leaves the cluster (either because of scale down or a machine failure) the grains which were activated on that silo will be re-activated on remaining silos as needed. An Orleans cluster can be scaled down to a single silo. The same properties which enable elastic scalability also enable fault tolerance: the cluster automatically detects and quickly recovers from failures.","title":"Elastic Scalability &amp; Fault Tolerance"},{"location":"Topic2/Topic2.1/Topic2.1.2/#run-anywhere","text":"Orleans runs anywhere that .NET Core or .NET Framework are supported. This includes hosting on Linux, Windows, and macOS and deploying to Kubernetes, virtual or physical machines, on premises or in the cloud, and PaaS services such as Azure Cloud Services.","title":"Run Anywhere"},{"location":"Topic2/Topic2.1/Topic2.1.2/#stateless-workers","text":"Stateless workers are specially marked grains which do not have any associated state and can be activated on multiple silos simultaneously. This enables increased parallelism for stateless functions. For more information, see the Stateless Worker Grains documentation.","title":"Stateless Workers"},{"location":"Topic2/Topic2.1/Topic2.1.2/#grain-call-filters","text":"Logic which is common to many grains can be expressed as Grain Call Filters . Orleans supports filters for both incoming and outgoing calls. Some common use-cases of filters are: authorization, logging and telemetry, and error handling.","title":"Grain Call Filters"},{"location":"Topic2/Topic2.1/Topic2.1.2/#request-context","text":"Metadata and other information can be passed along a series of requests using request context . Request context can be used for holding distributed tracing information or any other user-defined values.","title":"Request Context"},{"location":"Topic2/Topic2.1/Topic2.1.2/#documentation","text":"Documentation is located here","title":"Documentation"},{"location":"Topic2/Topic2.1/Topic2.1.2/#samples","text":"A variety of samples are available in the samples directory.","title":"Samples"},{"location":"Topic2/Topic2.1/Topic2.1.2/#getting-started","text":"Please see the getting started tutorial .","title":"Getting Started"},{"location":"Topic2/Topic2.1/Topic2.1.2/#building","text":"On Windows, run the build.cmd script to build the NuGet packages locally, then reference the required NuGet packages from /Artifacts/Release/* . You can run Test.cmd to run all BVT tests, and TestAll.cmd to also run Functional tests. On Linux and macOS, run the build.sh script or dotnet build to build Orleans.","title":"Building"},{"location":"Topic2/Topic2.1/Topic2.1.2/#official-builds","text":"The latest stable, production-quality release is located here . Nightly builds are published to a NuGet feed . These builds pass all functional tests, but are not thoroughly tested as the stable builds or pre-release builds published to NuGet. Using the nightly build packages in your project To use nightly builds in your project, add the MyGet feed using either of the following methods: 1. Changing the .csproj file to include this section: <RestoreSources> $(RestoreSources); https://orleans.pkgs.visualstudio.com/orleans-public/_packaging/orleans-builds/nuget/v3/index.json; </RestoreSources> or 2. Creating a `NuGet.config` file in the solution directory with the following contents: <?xml version=\"1.0\" encoding=\"utf-8\"?> <configuration> <packageSources> <clear /> <add key= \"orleans-builds\" value= \"https://orleans.pkgs.visualstudio.com/orleans-public/_packaging/orleans-builds/nuget/v3/index.json\" /> <add key= \"nuget\" value= \"https://api.nuget.org/v3/index.json\" /> </packageSources> </configuration>","title":"Official Builds"},{"location":"Topic2/Topic2.1/Topic2.1.2/#community","text":"Ask questions by opening an issue on GitHub or on Stack Overflow Chat on Gitter Orleans Blog Follow the @msftorleans Twitter account for Orleans announcements. OrleansContrib - GitHub organization for community add-ons to Orleans Various community projects, including Monitoring, Design Patterns, Storage Providers, etc. Guidelines for developers wanting to contribute code changes to Orleans . You are also encouraged to report bugs or start a technical discussion by starting a new thread on GitHub.","title":"Community"},{"location":"Topic2/Topic2.1/Topic2.1.2/#license","text":"This project is licensed under the MIT license .","title":"License"},{"location":"Topic2/Topic2.1/Topic2.1.2/#quick-links","text":"Microsoft Research project home Technical Report: Distributed Virtual Actors for Programmability and Scalability Orleans Documentation Contributing","title":"Quick Links"},{"location":"Topic2/Topic2.1/Topic2.1.3/","text":"Topic 2.1.3 \u00b6 What is Lorem Ipsum? \u00b6 Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum. Why do we use it? \u00b6 It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like). Where does it come from? \u00b6 Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham. Where can I get some? \u00b6 There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.","title":"Topic 2.1.3"},{"location":"Topic2/Topic2.1/Topic2.1.3/#topic-213","text":"","title":"Topic 2.1.3"},{"location":"Topic2/Topic2.1/Topic2.1.3/#what-is-lorem-ipsum","text":"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.","title":"What is Lorem Ipsum?"},{"location":"Topic2/Topic2.1/Topic2.1.3/#why-do-we-use-it","text":"It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).","title":"Why do we use it?"},{"location":"Topic2/Topic2.1/Topic2.1.3/#where-does-it-come-from","text":"Contrary to popular belief, Lorem Ipsum is not simply random text. It has roots in a piece of classical Latin literature from 45 BC, making it over 2000 years old. Richard McClintock, a Latin professor at Hampden-Sydney College in Virginia, looked up one of the more obscure Latin words, consectetur, from a Lorem Ipsum passage, and going through the cites of the word in classical literature, discovered the undoubtable source. Lorem Ipsum comes from sections 1.10.32 and 1.10.33 of \"de Finibus Bonorum et Malorum\" (The Extremes of Good and Evil) by Cicero, written in 45 BC. This book is a treatise on the theory of ethics, very popular during the Renaissance. The first line of Lorem Ipsum, \"Lorem ipsum dolor sit amet..\", comes from a line in section 1.10.32. The standard chunk of Lorem Ipsum used since the 1500s is reproduced below for those interested. Sections 1.10.32 and 1.10.33 from \"de Finibus Bonorum et Malorum\" by Cicero are also reproduced in their exact original form, accompanied by English versions from the 1914 translation by H. Rackham.","title":"Where does it come from?"},{"location":"Topic2/Topic2.1/Topic2.1.3/#where-can-i-get-some","text":"There are many variations of passages of Lorem Ipsum available, but the majority have suffered alteration in some form, by injected humour, or randomised words which don't look even slightly believable. If you are going to use a passage of Lorem Ipsum, you need to be sure there isn't anything embarrassing hidden in the middle of text. All the Lorem Ipsum generators on the Internet tend to repeat predefined chunks as necessary, making this the first true generator on the Internet. It uses a dictionary of over 200 Latin words, combined with a handful of model sentence structures, to generate Lorem Ipsum which looks reasonable. The generated Lorem Ipsum is therefore always free from repetition, injected humour, or non-characteristic words etc.","title":"Where can I get some?"},{"location":"Topic2/Topic2.2/Topic2.2.1/","text":"Topic 2.2.1 \u00b6","title":"Topic 2.2.1"},{"location":"Topic2/Topic2.2/Topic2.2.1/#topic-221","text":"","title":"Topic 2.2.1"},{"location":"Topic2/Topic2.2/Topic2.2.2/","text":"Topic 2.2.2 \u00b6","title":"Topic 2.2.2"},{"location":"Topic2/Topic2.2/Topic2.2.2/#topic-222","text":"","title":"Topic 2.2.2"},{"location":"Topic2/Topic2.2/Topic2.2.3/","text":"Topic 2.2.3 \u00b6","title":"Topic 2.2.3"},{"location":"Topic2/Topic2.2/Topic2.2.3/#topic-223","text":"","title":"Topic 2.2.3"},{"location":"Topic2/Topic2.3/Topic2.3.1/","text":"Topic 2.3.1 \u00b6","title":"Topic 2.3.1"},{"location":"Topic2/Topic2.3/Topic2.3.1/#topic-231","text":"","title":"Topic 2.3.1"},{"location":"Topic2/Topic2.3/Topic2.3.2/","text":"Topic 2.3.2 \u00b6","title":"Topic 2.3.2"},{"location":"Topic2/Topic2.3/Topic2.3.2/#topic-232","text":"","title":"Topic 2.3.2"},{"location":"Topic2/Topic2.3/Topic2.3.3/","text":"Topic 2.3.3 \u00b6","title":"Topic 2.3.3"},{"location":"Topic2/Topic2.3/Topic2.3.3/#topic-233","text":"","title":"Topic 2.3.3"},{"location":"Topic3/Topic3.1/Topic3.1.1/","text":"Topic 3.1.1 Welcome to the Windows Terminal, Console and Command-Line repo \u00b6 This repository contains the source code for: Windows Terminal Windows Terminal Preview The Windows console host ( conhost.exe ) Components shared between the two projects ColorTool Sample projects that show how to consume the Windows Console APIs Related repositories include: Windows Terminal Documentation ( Repo: Contribute to the docs ) Console API Documentation Cascadia Code Font Installing and running Windows Terminal \u00b6 \ud83d\udd34 Note: Windows Terminal requires Windows 10 1903 (build 18362) or later Microsoft Store [Recommended] \u00b6 Install the Windows Terminal from the Microsoft Store . This allows you to always be on the latest version when we release new builds with automatic upgrades. This is our preferred method. Other install methods \u00b6 Via GitHub \u00b6 For users who are unable to install Windows Terminal from the Microsoft Store, released builds can be manually downloaded from this repository's Releases page . Download the Microsoft.WindowsTerminal_<versionNumber>.msixbundle file from the Assets section. To install the app, you can simply double-click on the .msixbundle file, and the app installer should automatically run. If that fails for any reason, you can try the following command at a PowerShell prompt: # NOTE: If you are using PowerShell 7+, please run # Import-Module Appx -UseWindowsPowerShell # before using Add-AppxPackage. Add-AppxPackage Microsoft . WindowsTerminal_ < versionNumber >. msixbundle \ud83d\udd34 Note: If you install Terminal manually: Terminal will not auto-update when new builds are released so you will need to regularly install the latest Terminal release to receive all the latest fixes and improvements! Via Windows Package Manager CLI (aka winget) \u00b6 winget users can download and install the latest Terminal release by installing the Microsoft.WindowsTerminal package: winget install - -id = Microsoft . WindowsTerminal -e Via Chocolatey (unofficial) \u00b6 Chocolatey users can download and install the latest Terminal release by installing the microsoft-windows-terminal package: choco install microsoft-windows-terminal To upgrade Windows Terminal using Chocolatey, run the following: choco upgrade microsoft-windows-terminal If you have any issues when installing/upgrading the package please go to the Windows Terminal package page and follow the Chocolatey triage process Via Scoop (unofficial) \u00b6 Scoop users can download and install the latest Terminal release by installing the windows-terminal package: scoop bucket add extras scoop install windows-terminal To update Windows Terminal using Scoop, run the following: scoop update windows-terminal If you have any issues when installing/updating the package, please search for or report the same on the issues page of Scoop Extras bucket repository. Windows Terminal 2.0 Roadmap \u00b6 The plan for delivering Windows Terminal 2.0 is described here and will be updated as the project proceeds. Project Build Status \u00b6 Project Build Status Terminal ColorTool Terminal & Console Overview \u00b6 Please take a few minutes to review the overview below before diving into the code: Windows Terminal \u00b6 Windows Terminal is a new, modern, feature-rich, productive terminal application for command-line users. It includes many of the features most frequently requested by the Windows command-line community including support for tabs, rich text, globalization, configurability, theming & styling, and more. The Terminal will also need to meet our goals and measures to ensure it remains fast and efficient, and doesn't consume vast amounts of memory or power. The Windows Console Host \u00b6 The Windows Console host, conhost.exe , is Windows' original command-line user experience. It also hosts Windows' command-line infrastructure and the Windows Console API server, input engine, rendering engine, user preferences, etc. The console host code in this repository is the actual source from which the conhost.exe in Windows itself is built. Since taking ownership of the Windows command-line in 2014, the team added several new features to the Console, including background transparency, line-based selection, support for ANSI / Virtual Terminal sequences , 24-bit color , a Pseudoconsole (\"ConPTY\") , and more. However, because Windows Console's primary goal is to maintain backward compatibility, we have been unable to add many of the features the community (and the team) have been wanting for the last several years including tabs, unicode text, and emoji. These limitations led us to create the new Windows Terminal. You can read more about the evolution of the command-line in general, and the Windows command-line specifically in this accompanying series of blog posts on the Command-Line team's blog. Shared Components \u00b6 While overhauling Windows Console, we modernized its codebase considerably, cleanly separating logical entities into modules and classes, introduced some key extensibility points, replaced several old, home-grown collections and containers with safer, more efficient STL containers , and made the code simpler and safer by using Microsoft's Windows Implementation Libraries - WIL . This overhaul resulted in several of Console's key components being available for re-use in any terminal implementation on Windows. These components include a new DirectWrite-based text layout and rendering engine, a text buffer capable of storing both UTF-16 and UTF-8, a VT parser/emitter, and more. Creating the new Windows Terminal \u00b6 When we started planning the new Windows Terminal application, we explored and evaluated several approaches and technology stacks. We ultimately decided that our goals would be best met by continuing our investment in our C++ codebase, which would allow us to reuse several of the aforementioned modernized components in both the existing Console and the new Terminal. Further, we realized that this would allow us to build much of the Terminal's core itself as a reusable UI control that others can incorporate into their own applications. The result of this work is contained within this repo and delivered as the Windows Terminal application you can download from the Microsoft Store, or directly from this repo's releases . Resources \u00b6 For more information about Windows Terminal, you may find some of these resources useful and interesting: Command-Line Blog Command-Line Backgrounder Blog Series Windows Terminal Launch: Terminal \"Sizzle Video\" Windows Terminal Launch: Build 2019 Session Run As Radio: Show 645 - Windows Terminal with Richard Turner Azure Devops Podcast: Episode 54 - Kayla Cinnamon and Rich Turner on DevOps on the Windows Terminal Microsoft Ignite 2019 Session: The Modern Windows Command Line: Windows Terminal - BRK3321 FAQ \u00b6 I built and ran the new Terminal, but it looks just like the old console \u00b6 Cause: You're launching the incorrect solution in Visual Studio. Solution: Make sure you're building & deploying the CascadiaPackage project in Visual Studio. \u26a0 Note: OpenConsole.exe is just a locally-built conhost.exe , the classic Windows Console that hosts Windows' command-line infrastructure. OpenConsole is used by Windows Terminal to connect to and communicate with command-line applications (via ConPty ). Documentation \u00b6 All project documentation is located at aka.ms/terminal-docs . If you would like to contribute to the documentation, please submit a pull request on the Windows Terminal Documentation repo . Contributing \u00b6 We are excited to work alongside you, our amazing community, to build and enhance Windows Terminal! BEFORE you start work on a feature/fix , please read & follow our Contributor's Guide to help avoid any wasted or duplicate effort. Communicating with the Team \u00b6 The easiest way to communicate with the team is via GitHub issues. Please file new issues, feature requests and suggestions, but DO search for similar open/closed pre-existing issues before creating a new issue. If you would like to ask a question that you feel doesn't warrant an issue (yet), please reach out to us via Twitter: Kayla Cinnamon, Program Manager: @cinnamon_msft Dustin Howett, Engineering Lead: @dhowett Michael Niksa, Senior Developer: @michaelniksa Mike Griese, Developer: @zadjii Carlos Zamora, Developer: @cazamor_msft Leon Liang, Developer: @leonmsft Pankaj Bhojwani, Developer Leonard Hecker, Developer: @LeonardHecker Developer Guidance \u00b6 Prerequisites \u00b6 You must be running Windows 1903 (build >= 10.0.18362.0) or later to run Windows Terminal You must enable Developer Mode in the Windows Settings app to locally install and run Windows Terminal You must have PowerShell 7 or later installed You must have the Windows 10 1903 SDK installed You must have at least VS 2019 installed You must install the following Workloads via the VS Installer. Note: Opening the solution in VS 2019 will prompt you to install missing components automatically : Desktop Development with C++ Universal Windows Platform Development The following Individual Components C++ (v142) Universal Windows Platform Tools Building the Code \u00b6 This repository uses git submodules for some of its dependencies. To make sure submodules are restored or updated, be sure to run the following prior to building: git submodule update --init --recursive OpenConsole.sln may be built from within Visual Studio or from the command-line using a set of convenience scripts & tools in the /tools directory: Building in PowerShell \u00b6 Import-Module .\\ tools \\ OpenConsole . psm1 Set-MsBuildDevEnvironment Invoke-OpenConsoleBuild Building in Cmd \u00b6 . \\t ools \\r azzle.cmd bcz Running & Debugging \u00b6 To debug the Windows Terminal in VS, right click on CascadiaPackage (in the Solution Explorer) and go to properties. In the Debug menu, change \"Application process\" and \"Background task process\" to \"Native Only\". You should then be able to build & debug the Terminal project by hitting F5 . \ud83d\udc49 You will not be able to launch the Terminal directly by running the WindowsTerminal.exe. For more details on why, see #926 , #4043 Coding Guidance \u00b6 Please review these brief docs below about our coding practices. \ud83d\udc49 If you find something missing from these docs, feel free to contribute to any of our documentation files anywhere in the repository (or write some new ones!) This is a work in progress as we learn what we'll need to provide people in order to be effective contributors to our project. Coding Style Code Organization Exceptions in our legacy codebase Helpful smart pointers and macros for interfacing with Windows in WIL Code of Conduct \u00b6 This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"Topic 3.1.1"},{"location":"Topic3/Topic3.1/Topic3.1.1/#topic-311-welcome-to-the-windows-terminal-console-and-command-line-repo","text":"This repository contains the source code for: Windows Terminal Windows Terminal Preview The Windows console host ( conhost.exe ) Components shared between the two projects ColorTool Sample projects that show how to consume the Windows Console APIs Related repositories include: Windows Terminal Documentation ( Repo: Contribute to the docs ) Console API Documentation Cascadia Code Font","title":"Topic 3.1.1 Welcome to the Windows Terminal, Console and Command-Line repo"},{"location":"Topic3/Topic3.1/Topic3.1.1/#installing-and-running-windows-terminal","text":"\ud83d\udd34 Note: Windows Terminal requires Windows 10 1903 (build 18362) or later","title":"Installing and running Windows Terminal"},{"location":"Topic3/Topic3.1/Topic3.1.1/#microsoft-store-recommended","text":"Install the Windows Terminal from the Microsoft Store . This allows you to always be on the latest version when we release new builds with automatic upgrades. This is our preferred method.","title":"Microsoft Store [Recommended]"},{"location":"Topic3/Topic3.1/Topic3.1.1/#other-install-methods","text":"","title":"Other install methods"},{"location":"Topic3/Topic3.1/Topic3.1.1/#via-github","text":"For users who are unable to install Windows Terminal from the Microsoft Store, released builds can be manually downloaded from this repository's Releases page . Download the Microsoft.WindowsTerminal_<versionNumber>.msixbundle file from the Assets section. To install the app, you can simply double-click on the .msixbundle file, and the app installer should automatically run. If that fails for any reason, you can try the following command at a PowerShell prompt: # NOTE: If you are using PowerShell 7+, please run # Import-Module Appx -UseWindowsPowerShell # before using Add-AppxPackage. Add-AppxPackage Microsoft . WindowsTerminal_ < versionNumber >. msixbundle \ud83d\udd34 Note: If you install Terminal manually: Terminal will not auto-update when new builds are released so you will need to regularly install the latest Terminal release to receive all the latest fixes and improvements!","title":"Via GitHub"},{"location":"Topic3/Topic3.1/Topic3.1.1/#via-windows-package-manager-cli-aka-winget","text":"winget users can download and install the latest Terminal release by installing the Microsoft.WindowsTerminal package: winget install - -id = Microsoft . WindowsTerminal -e","title":"Via Windows Package Manager CLI (aka winget)"},{"location":"Topic3/Topic3.1/Topic3.1.1/#via-chocolatey-unofficial","text":"Chocolatey users can download and install the latest Terminal release by installing the microsoft-windows-terminal package: choco install microsoft-windows-terminal To upgrade Windows Terminal using Chocolatey, run the following: choco upgrade microsoft-windows-terminal If you have any issues when installing/upgrading the package please go to the Windows Terminal package page and follow the Chocolatey triage process","title":"Via Chocolatey (unofficial)"},{"location":"Topic3/Topic3.1/Topic3.1.1/#via-scoop-unofficial","text":"Scoop users can download and install the latest Terminal release by installing the windows-terminal package: scoop bucket add extras scoop install windows-terminal To update Windows Terminal using Scoop, run the following: scoop update windows-terminal If you have any issues when installing/updating the package, please search for or report the same on the issues page of Scoop Extras bucket repository.","title":"Via Scoop (unofficial)"},{"location":"Topic3/Topic3.1/Topic3.1.1/#windows-terminal-20-roadmap","text":"The plan for delivering Windows Terminal 2.0 is described here and will be updated as the project proceeds.","title":"Windows Terminal 2.0 Roadmap"},{"location":"Topic3/Topic3.1/Topic3.1.1/#project-build-status","text":"Project Build Status Terminal ColorTool","title":"Project Build Status"},{"location":"Topic3/Topic3.1/Topic3.1.1/#terminal-console-overview","text":"Please take a few minutes to review the overview below before diving into the code:","title":"Terminal &amp; Console Overview"},{"location":"Topic3/Topic3.1/Topic3.1.1/#windows-terminal","text":"Windows Terminal is a new, modern, feature-rich, productive terminal application for command-line users. It includes many of the features most frequently requested by the Windows command-line community including support for tabs, rich text, globalization, configurability, theming & styling, and more. The Terminal will also need to meet our goals and measures to ensure it remains fast and efficient, and doesn't consume vast amounts of memory or power.","title":"Windows Terminal"},{"location":"Topic3/Topic3.1/Topic3.1.1/#the-windows-console-host","text":"The Windows Console host, conhost.exe , is Windows' original command-line user experience. It also hosts Windows' command-line infrastructure and the Windows Console API server, input engine, rendering engine, user preferences, etc. The console host code in this repository is the actual source from which the conhost.exe in Windows itself is built. Since taking ownership of the Windows command-line in 2014, the team added several new features to the Console, including background transparency, line-based selection, support for ANSI / Virtual Terminal sequences , 24-bit color , a Pseudoconsole (\"ConPTY\") , and more. However, because Windows Console's primary goal is to maintain backward compatibility, we have been unable to add many of the features the community (and the team) have been wanting for the last several years including tabs, unicode text, and emoji. These limitations led us to create the new Windows Terminal. You can read more about the evolution of the command-line in general, and the Windows command-line specifically in this accompanying series of blog posts on the Command-Line team's blog.","title":"The Windows Console Host"},{"location":"Topic3/Topic3.1/Topic3.1.1/#shared-components","text":"While overhauling Windows Console, we modernized its codebase considerably, cleanly separating logical entities into modules and classes, introduced some key extensibility points, replaced several old, home-grown collections and containers with safer, more efficient STL containers , and made the code simpler and safer by using Microsoft's Windows Implementation Libraries - WIL . This overhaul resulted in several of Console's key components being available for re-use in any terminal implementation on Windows. These components include a new DirectWrite-based text layout and rendering engine, a text buffer capable of storing both UTF-16 and UTF-8, a VT parser/emitter, and more.","title":"Shared Components"},{"location":"Topic3/Topic3.1/Topic3.1.1/#creating-the-new-windows-terminal","text":"When we started planning the new Windows Terminal application, we explored and evaluated several approaches and technology stacks. We ultimately decided that our goals would be best met by continuing our investment in our C++ codebase, which would allow us to reuse several of the aforementioned modernized components in both the existing Console and the new Terminal. Further, we realized that this would allow us to build much of the Terminal's core itself as a reusable UI control that others can incorporate into their own applications. The result of this work is contained within this repo and delivered as the Windows Terminal application you can download from the Microsoft Store, or directly from this repo's releases .","title":"Creating the new Windows Terminal"},{"location":"Topic3/Topic3.1/Topic3.1.1/#resources","text":"For more information about Windows Terminal, you may find some of these resources useful and interesting: Command-Line Blog Command-Line Backgrounder Blog Series Windows Terminal Launch: Terminal \"Sizzle Video\" Windows Terminal Launch: Build 2019 Session Run As Radio: Show 645 - Windows Terminal with Richard Turner Azure Devops Podcast: Episode 54 - Kayla Cinnamon and Rich Turner on DevOps on the Windows Terminal Microsoft Ignite 2019 Session: The Modern Windows Command Line: Windows Terminal - BRK3321","title":"Resources"},{"location":"Topic3/Topic3.1/Topic3.1.1/#faq","text":"","title":"FAQ"},{"location":"Topic3/Topic3.1/Topic3.1.1/#i-built-and-ran-the-new-terminal-but-it-looks-just-like-the-old-console","text":"Cause: You're launching the incorrect solution in Visual Studio. Solution: Make sure you're building & deploying the CascadiaPackage project in Visual Studio. \u26a0 Note: OpenConsole.exe is just a locally-built conhost.exe , the classic Windows Console that hosts Windows' command-line infrastructure. OpenConsole is used by Windows Terminal to connect to and communicate with command-line applications (via ConPty ).","title":"I built and ran the new Terminal, but it looks just like the old console"},{"location":"Topic3/Topic3.1/Topic3.1.1/#documentation","text":"All project documentation is located at aka.ms/terminal-docs . If you would like to contribute to the documentation, please submit a pull request on the Windows Terminal Documentation repo .","title":"Documentation"},{"location":"Topic3/Topic3.1/Topic3.1.1/#contributing","text":"We are excited to work alongside you, our amazing community, to build and enhance Windows Terminal! BEFORE you start work on a feature/fix , please read & follow our Contributor's Guide to help avoid any wasted or duplicate effort.","title":"Contributing"},{"location":"Topic3/Topic3.1/Topic3.1.1/#communicating-with-the-team","text":"The easiest way to communicate with the team is via GitHub issues. Please file new issues, feature requests and suggestions, but DO search for similar open/closed pre-existing issues before creating a new issue. If you would like to ask a question that you feel doesn't warrant an issue (yet), please reach out to us via Twitter: Kayla Cinnamon, Program Manager: @cinnamon_msft Dustin Howett, Engineering Lead: @dhowett Michael Niksa, Senior Developer: @michaelniksa Mike Griese, Developer: @zadjii Carlos Zamora, Developer: @cazamor_msft Leon Liang, Developer: @leonmsft Pankaj Bhojwani, Developer Leonard Hecker, Developer: @LeonardHecker","title":"Communicating with the Team"},{"location":"Topic3/Topic3.1/Topic3.1.1/#developer-guidance","text":"","title":"Developer Guidance"},{"location":"Topic3/Topic3.1/Topic3.1.1/#prerequisites","text":"You must be running Windows 1903 (build >= 10.0.18362.0) or later to run Windows Terminal You must enable Developer Mode in the Windows Settings app to locally install and run Windows Terminal You must have PowerShell 7 or later installed You must have the Windows 10 1903 SDK installed You must have at least VS 2019 installed You must install the following Workloads via the VS Installer. Note: Opening the solution in VS 2019 will prompt you to install missing components automatically : Desktop Development with C++ Universal Windows Platform Development The following Individual Components C++ (v142) Universal Windows Platform Tools","title":"Prerequisites"},{"location":"Topic3/Topic3.1/Topic3.1.1/#building-the-code","text":"This repository uses git submodules for some of its dependencies. To make sure submodules are restored or updated, be sure to run the following prior to building: git submodule update --init --recursive OpenConsole.sln may be built from within Visual Studio or from the command-line using a set of convenience scripts & tools in the /tools directory:","title":"Building the Code"},{"location":"Topic3/Topic3.1/Topic3.1.1/#building-in-powershell","text":"Import-Module .\\ tools \\ OpenConsole . psm1 Set-MsBuildDevEnvironment Invoke-OpenConsoleBuild","title":"Building in PowerShell"},{"location":"Topic3/Topic3.1/Topic3.1.1/#building-in-cmd","text":". \\t ools \\r azzle.cmd bcz","title":"Building in Cmd"},{"location":"Topic3/Topic3.1/Topic3.1.1/#running-debugging","text":"To debug the Windows Terminal in VS, right click on CascadiaPackage (in the Solution Explorer) and go to properties. In the Debug menu, change \"Application process\" and \"Background task process\" to \"Native Only\". You should then be able to build & debug the Terminal project by hitting F5 . \ud83d\udc49 You will not be able to launch the Terminal directly by running the WindowsTerminal.exe. For more details on why, see #926 , #4043","title":"Running &amp; Debugging"},{"location":"Topic3/Topic3.1/Topic3.1.1/#coding-guidance","text":"Please review these brief docs below about our coding practices. \ud83d\udc49 If you find something missing from these docs, feel free to contribute to any of our documentation files anywhere in the repository (or write some new ones!) This is a work in progress as we learn what we'll need to provide people in order to be effective contributors to our project. Coding Style Code Organization Exceptions in our legacy codebase Helpful smart pointers and macros for interfacing with Windows in WIL","title":"Coding Guidance"},{"location":"Topic3/Topic3.1/Topic3.1.1/#code-of-conduct","text":"This project has adopted the Microsoft Open Source Code of Conduct . For more information see the Code of Conduct FAQ or contact opencode@microsoft.com with any additional questions or comments.","title":"Code of Conduct"},{"location":"Topic3/Topic3.1/Topic3.1.2/","text":"Topic 3.1.2 \u00b6","title":"Topic 3.1.2"},{"location":"Topic3/Topic3.1/Topic3.1.2/#topic-312","text":"","title":"Topic 3.1.2"},{"location":"Topic3/Topic3.1/Topic3.1.3/","text":"Topic 3.1.3 \u00b6","title":"Topic 3.1.3"},{"location":"Topic3/Topic3.1/Topic3.1.3/#topic-313","text":"","title":"Topic 3.1.3"},{"location":"Topic3/Topic3.2/Topic3.2.1/","text":"Topic 3.2.1 \u00b6","title":"Topic 3.2.1"},{"location":"Topic3/Topic3.2/Topic3.2.1/#topic-321","text":"","title":"Topic 3.2.1"},{"location":"Topic3/Topic3.2/Topic3.2.2/","text":"Topic 3.2.2 \u00b6","title":"Topic 3.2.2"},{"location":"Topic3/Topic3.2/Topic3.2.2/#topic-322","text":"","title":"Topic 3.2.2"},{"location":"Topic3/Topic3.2/Topic3.2.3/","text":"Topic 3.2.3 \u00b6","title":"Topic 3.2.3"},{"location":"Topic3/Topic3.2/Topic3.2.3/#topic-323","text":"","title":"Topic 3.2.3"},{"location":"Topic3/Topic3.3/Topic3.3.1/","text":"Topic 3.3.1 \u00b6","title":"Topic 3.3.1"},{"location":"Topic3/Topic3.3/Topic3.3.1/#topic-331","text":"","title":"Topic 3.3.1"},{"location":"Topic3/Topic3.3/Topic3.3.2/","text":"Topic 3.3.2 \u00b6","title":"Topic 3.3.2"},{"location":"Topic3/Topic3.3/Topic3.3.2/#topic-332","text":"","title":"Topic 3.3.2"},{"location":"Topic3/Topic3.3/Topic3.3.3/","text":"Topic 3.3.3 \u00b6","title":"Topic 3.3.3"},{"location":"Topic3/Topic3.3/Topic3.3.3/#topic-333","text":"","title":"Topic 3.3.3"}]}